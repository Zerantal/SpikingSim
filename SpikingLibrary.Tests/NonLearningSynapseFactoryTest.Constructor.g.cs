// <copyright file="NonLearningSynapseFactoryTest.Constructor.g.cs" company="Monash University">Copyright © Monash University 2009</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using MathLib.Statistics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace SpikingLibrary
{
    public partial class NonLearningSynapseFactoryTest
    {
[TestMethod]
[PexGeneratedBy(typeof(NonLearningSynapseFactoryTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException680()
{
    try
    {
      if (!PexContract.HasRequiredRuntimeContracts
               (typeof(NonLearningSynapseFactory), (PexRuntimeContractsFlags)28799))
        Assert.Inconclusive
            ("assembly SpikingLibrary is not instrumented with runtime contracts");
      NonLearningSynapseFactory nonLearningSynapseFactory;
      nonLearningSynapseFactory =
        this.Constructor((INumberGenerator)null, (INumberGenerator)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(NonLearningSynapseFactoryTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException71()
{
    try
    {
      if (!PexContract.HasRequiredRuntimeContracts
               (typeof(NonLearningSynapseFactory), (PexRuntimeContractsFlags)28799))
        Assert.Inconclusive
            ("assembly SpikingLibrary is not instrumented with runtime contracts");
      ConstantGenerator constantGenerator;
      NonLearningSynapseFactory nonLearningSynapseFactory;
      constantGenerator = new ConstantGenerator(0);
      nonLearningSynapseFactory = this.Constructor
                                      ((INumberGenerator)constantGenerator, (INumberGenerator)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(NonLearningSynapseFactoryTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException546()
{
    try
    {
      if (!PexContract.HasRequiredRuntimeContracts
               (typeof(NonLearningSynapseFactory), (PexRuntimeContractsFlags)28799))
        Assert.Inconclusive
            ("assembly SpikingLibrary is not instrumented with runtime contracts");
      NormalRandomGenerator normalRandomGenerator;
      NonLearningSynapseFactory nonLearningSynapseFactory;
      normalRandomGenerator = new NormalRandomGenerator(0, 0, 0);
      nonLearningSynapseFactory = this.Constructor
                                      ((INumberGenerator)normalRandomGenerator, (INumberGenerator)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(NonLearningSynapseFactoryTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException273()
{
    try
    {
      if (!PexContract.HasRequiredRuntimeContracts
               (typeof(NonLearningSynapseFactory), (PexRuntimeContractsFlags)28799))
        Assert.Inconclusive
            ("assembly SpikingLibrary is not instrumented with runtime contracts");
      UniformRandomGenerator uniformRandomGenerator;
      NonLearningSynapseFactory nonLearningSynapseFactory;
      uniformRandomGenerator = new UniformRandomGenerator(0, 0);
      nonLearningSynapseFactory = this.Constructor
                                      ((INumberGenerator)uniformRandomGenerator, (INumberGenerator)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(NonLearningSynapseFactoryTest))]
public void Constructor139()
{
    NormalRandomGenerator normalRandomGenerator;
    NonLearningSynapseFactory nonLearningSynapseFactory;
    normalRandomGenerator = new NormalRandomGenerator(0, 0, 0);
    nonLearningSynapseFactory =
      this.Constructor((INumberGenerator)normalRandomGenerator, 
                       (INumberGenerator)normalRandomGenerator);
    Assert.IsNotNull((object)nonLearningSynapseFactory);
}
    }
}
